package com.bham.finalyearproject.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClassLeaderboardAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassLeaderboardAllPropertiesEquals(ClassLeaderboard expected, ClassLeaderboard actual) {
        assertClassLeaderboardAutoGeneratedPropertiesEquals(expected, actual);
        assertClassLeaderboardAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassLeaderboardAllUpdatablePropertiesEquals(ClassLeaderboard expected, ClassLeaderboard actual) {
        assertClassLeaderboardUpdatableFieldsEquals(expected, actual);
        assertClassLeaderboardUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassLeaderboardAutoGeneratedPropertiesEquals(ClassLeaderboard expected, ClassLeaderboard actual) {
        assertThat(expected)
            .as("Verify ClassLeaderboard auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassLeaderboardUpdatableFieldsEquals(ClassLeaderboard expected, ClassLeaderboard actual) {
        assertThat(expected)
            .as("Verify ClassLeaderboard relevant properties")
            .satisfies(e -> assertThat(e.getRank()).as("check rank").isEqualTo(actual.getRank()))
            .satisfies(e -> assertThat(e.getTotalPoints()).as("check totalPoints").isEqualTo(actual.getTotalPoints()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassLeaderboardUpdatableRelationshipsEquals(ClassLeaderboard expected, ClassLeaderboard actual) {
        assertThat(expected)
            .as("Verify ClassLeaderboard relationships")
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()))
            .satisfies(e -> assertThat(e.getStudentClass()).as("check studentClass").isEqualTo(actual.getStudentClass()));
    }
}
